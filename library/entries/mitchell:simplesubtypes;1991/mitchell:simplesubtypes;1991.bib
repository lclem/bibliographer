
@Article{         mitchell:simplesubtypes;1991,
  Author        = "Mitchell, John C.",
  Abstract      = "{Subtyping appears in a variety of programming languages, in the form of the of integers to reals, Pascal subranges, and subtypes arising from class hierarchies in languages with inheritance. A general framework based on untyped lambda calculus provides a simple semantic model of subtyping and is used to demonstrate that an extension of Curry's type inference rules are semantically complete. An algorithm G for computing the most general typing associated with any given expression, and a restricted, optimized algorithm GA using only atomic subtyping hypotheses are developed. Both algorithms may be extended to insert type conversion functions at compile time or allow polymorphic function declarations as in ML.}",
  date-added    = "2013-07-17 13:15:12 +0000",
  date-modified = "2013-07-17 13:15:22 +0000",
  DOI           = "10.1017/s0956796800000113",
  Journal       = "Journal of Functional Programming",
  Keywords      = "type inference",
  Number        = "03",
  Pages         = "245--285",
  posted-at     = "2009-05-26 17:12:12",
  priority      = "2",
  Title         = "{Type inference with simple subtypes}",
  URL           = "http://dx.doi.org/10.1017/s0956796800000113",
  Volume        = "1",
  Year          = "1991",
  bdsk-url-1    = "http://dx.doi.org/10.1017/s0956796800000113",
  File          = "Type inference with simple subtypes - Mitchell (0) (0) - a - a - u.pdf",
  file-2        = "Type inference with simple subtypes - Mitchell (0) (0) - a - a - u.ps"
}
