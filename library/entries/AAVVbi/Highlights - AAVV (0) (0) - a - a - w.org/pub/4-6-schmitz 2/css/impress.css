@import 'reset.css';
/* Based on `impress-demo.css', but with most of the actual styling
   removed, and a few extra bells and whistles:
    * speaker notes (see `speaker'), and
    * sub-steps with styles `alert', `uncover', `fade', etc.
*/
body {
    font-family: sans-serif;
    min-height: 740px;
    background: rgb(240, 240, 240);
    background: -webkit-radial-gradient(rgb(250, 250, 250), rgb(210, 210, 210));
    background:    -moz-radial-gradient(rgb(250, 250, 250), rgb(210, 210, 210));
    background:     -ms-radial-gradient(rgb(250, 250, 250), rgb(210, 210, 210));
    background:      -o-radial-gradient(rgb(250, 250, 250), rgb(210, 210, 210));
    background:         radial-gradient(rgb(250, 250, 250), rgb(210, 210, 210));

}
b, strong { font-weight: bold }
i, em { font-style: italic }
a, a:visited, a:hover, a:active { color: black; text-decoration: none; }
/* Because the main point behind the impress.js demo is to demo
   impress.js we display a fallback message for users with browsers
   that don't support all the features required by it.

   All of the content will be still fully accessible for them, but I want
   them to know that they are missing something - that's what the demo is
   about, isn't it?

   And then we hide the message, when support is detected in the browser.
*/
.fallback-message {
    line-height: 1.3;
    width: 40em;
    padding: 1em 2em 1em 2em;
    margin: 2em auto;
    border: 1px solid #A90000;
    border-radius: 10px;
    background: rgba(232,55,7,.8);
}
.fallback-message p {
    margin-bottom: 10px;
}
.impress-supported .fallback-message {
    display: none;
}
/* ... and we enhance the styles for impress.js.

    Basically we remove the margin and make inactive steps a little
    bit transparent.
*/
.impress-enabled section.step, .impress-enabled header.step {
    margin: 0;
    /*opacity: 0.3;    
    -webkit-transition: opacity 1s;
    -moz-transition:    opacity 1s;
    -ms-transition:     opacity 1s;
    -o-transition:      opacity 1s;
    transition:         opacity 1s;*/
}
.impress-enabled section.step.active, .impress-enabled header.step.active
  { opacity: 1 }
/* Now let's style the presentation steps.  We start with basics to
    make sure it displays correctly everywhere ...  */
section.step, header.step {
    position: relative;
    width: 900px;
    padding: 40px;
    margin: 20px auto;
    -webkit-box-sizing: border-box;
    -moz-box-sizing:    border-box;
    -ms-box-sizing:     border-box;
    -o-box-sizing:      border-box;
    box-sizing:         border-box;
}
/* These 'slide' step styles were heavily inspired by HTML5 Slides:
    http://html5slides.googlecode.com/svn/trunk/styles.css

    They cover everything what you see on first four steps of the
    demo.  
*/
.slide {
    display: block;
    width:  900px;
    height: 700px;
    padding: 40px 60px;
    background-color: white;
    border: 1px solid rgba(0, 0, 0, .3);
    border-radius: 10px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, .1);
}
/*section.slide:after {
  font-size: 12pt;
  content: attr(data-slide-num) "/" attr(data-total-slides);
  position: absolute;
  bottom: 20px;
  right: 60px;
  line-height: 1.9;
}*/
.speaker {
    font-family: sans-serif!important;
    display: none;
    /*  ... and give it some fixed position and nice styles. */
    position: fixed;
    top: -3em;
    right: -12em;
    font-size: 11pt;
    position: absolute;
    margin: 1em;
    padding: 1em 2em 1em 2em;
    line-height: 1.2em;
    z-index: 120;
    width: 24em;
    height: auto;
    opacity: 0;
    display: -webkit-box !important;
    display: -moz-box !important;
    display: -ms-box !important;
    display: -o-box !important;
    display: box !important;
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -ms-box-orient: vertical;
    box-orient: vertical;
    -webkit-box-align: center;
    -moz-box-align: center;
    -ms-box-align: center;
    box-align: center;
    -webkit-box-pack: center;
    -moz-box-pack: center;
    -ms-box-pack: center;
    box-pack: center;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    -ms-border-radius: 5px;
    -o-border-radius: 5px;
    border-radius: 5px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    background: rgba(0, 0, 0, 0.5);
    color: #EEE;
    -webkit-box-shadow: 0 0 1.5px #aaa;
    -moz-box-shadow: 0 0 1.5px #aaa;
    box-shadow: 0 0 1.5px #aaa;
    /* ... and position it below the bottom of the screen (relative to
        it's fixed position) */
    -webkit-transform: translateY(1000%);
    -moz-transform:    translateY(1000%);
    -ms-transform:     translateY(1000%);
    -o-transform:      translateY(1000%);
    transform:         translateY(1000%);
    -webkit-transition: all 0.4s ease-in-out;
    -moz-transition: all 0.4s ease-in-out;
    -o-transition: all 0.4s ease-in-out;
    transition: all 0.4s ease-in-out;
    text-align: left;
}
/* Now we 'enable' the hint when presentation is initialized ...  */
.impress-enabled .speaker { display: block }
/* ... and we will show it when the first step (with id 'step-1') is
    active.  */
.impress-speaker .speaker {
    /* We remove the transparency and position the hint in its default
        fixed position.  */
    opacity: 1;
    -webkit-transform: translateY(0px);
    -moz-transform:    translateY(0px);
    -ms-transform:     translateY(0px);
    -o-transform:      translateY(0px);
    transform:         translateY(0px);
}
.speaker h3 {
  color: white!important;
  text-decoration: underline;
  text-align: center;
  margin-bottom: 1em;
}
.speaker p, .speaker li, .speaker dd { margin-bottom: 4pt }

/*
    The last step is an overview.
    There is no content in it, so we make sure it's not visible because we want
    to be able to click on other steps.

*/
#overview { display: none }

/*
    We also make other steps visible and give them a pointer cursor using the
    `impress-on-` class.
*/
.impress-on-overview .step {
    opacity: 1;
    cursor: pointer;
}

/*
    And as the last thing there is a workaround for quite strange bug.
    It happens a lot in Chrome. I don't remember if I've seen it in Firefox.

    Sometimes the element positioned in 3D (especially when it's moved back
    along Z axis) is not clickable, because it falls 'behind' the <body>
    element.

    To prevent this, I decided to make <body> non clickable by setting
    pointer-events property to `none` value.
    Value if this property is inherited, so to make everything else clickable
    I bring it back on the #impress element.

    If you want to know more about `pointer-events` here are some docs:
    https://developer.mozilla.org/en/CSS/pointer-events

    There is one very important thing to notice about this workaround - it makes
    everything 'unclickable' except what's in #impress element.

    So use it wisely ... or don't use at all.
*/
.impress-enabled          { pointer-events: none }
.impress-enabled #impress { pointer-events: auto }

/*
    There is one funny thing I just realized.

    Thanks to this workaround above everything except #impress element is invisible
    for click events. That means that the hint element is also not clickable.
    So basically all of this transforms and delayed transitions trickery was probably
    not needed at all...

    But it was fun to learn about it, wasn't it?
*/

/* Title slide */
header.slide {
  text-align: center;
  padding-top: 4em;
}
/* basic animations */
.alert { color: inherit }
.alert.active { color: red }
.visible { opacity: 0 }
.uncover { opacity: .3 }
.fade {
    -webkit-transition: opacity 0.2s ease-in-out;
    -moz-transition: opacity 0.2s ease-in-out;
    -o-transition: opacity 0.2s ease-in-out;
    transition: opacity 0.2s ease-in-out;
}
.in.past, .out.future, .active, .present {
    opacity: 1;
 }