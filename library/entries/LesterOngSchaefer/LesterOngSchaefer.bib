
@Article{         LesterOngSchaefer,
  Author        = "Lester, Martin and Ong, Luke and Schaefer, Max",
  Abstract      = "Web applications written in JavaScript are regularly used for dealing with sensitive or personal data. Consequently, reasoning about their security properties has become an important problem, which is made very difficult by the highly dynamic nature of the language, particularly its support for runtime code generation. As a first step towards dealing with this, we propose to investigate security analyses for languages with more principled forms of dynamic code generation. To this end, we present a static information flow analysis for a dynamically typed functional language with prototype-based inheritance and staged metaprogramming. We prove its soundness, implement it and test it on various examples designed to show its relevance to proving security properties, such as noninterference, in JavaScript. To our knowledge, this is the first fully static information flow analysis for a language with staged metaprogramming, and the first formal soundness proof of a CFA-based information flow analysis for a functional programming language.",
  date-added    = "2013-05-01 16:56:02 +0000",
  date-modified = "2013-05-01 16:56:02 +0000",
  EPrint        = "1302.3178",
  Month         = "02",
  Title         = "Information Flow Analysis for a Dynamically Typed Functional Language with Staged Metaprogramming",
  URL           = "http://arxiv.org/abs/1302.3178",
  Year          = "2013",
  bdsk-url-1    = "http://arxiv.org/abs/1302.3178",
  File          = "Information Flow Analysis for a Dynamically Typed Functional Language with Staged Metaprogramming - Lester, Ong, Schaefer (0) (0) - a - a - l.pdf"
}
