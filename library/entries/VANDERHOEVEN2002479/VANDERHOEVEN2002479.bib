
@Article{         VANDERHOEVEN2002479,
  Author        = "{van der Hoeven}, Joris",
  Abstract      = {Assume that we wish to expand the product h= fg of two formal power series f and g. Classically, there are two types of algorithms to do this: zealous algorithms first expand f and g up to order n, multiply the results and truncate at order n. Lazy algorithms on the contrary compute the coefficients of f, g and h gradually and they perform no more computations than strictly necessary at each stage. In particular, at the moment we compute the coefficient hiof ziin h, only f0,⋯ , fiand g0,⋯ , giare known. Lazy algorithms have the advantage that the coefficients of f and g may actually depend on ``previous" coefficients of h, as long as they are computed before they are needed in the multiplication, i.e. the coefficients fiand gimay depend on h0,⋯ , hi−1. For this reason, lazy algorithms are extremely useful when solving functional equations in rings of formal power series. However, lazy algorithms have the disadvantage that the classical asymptotically fast multiplication algorithms on polynomials---such as the divide and conquer algorithm and fast Fourier multiplication---cannot be used. In a previous paper, we therefore introduced relaxed algorithms, which share the property concerning the resolution of functional equations with lazy algorithms, but perform slightly more computations than lazy algorithms during the computation of a given coefficient of h. These extra computations anticipate the computations of the next coefficients of h and dramatically improve the asymptotic time complexities of such algorithms. In this paper, we survey several classical and new zealous algorithms for manipulating formal power series, including algorithms for multiplication, division, resolution of differential equations, composition and reversion. Next, we give various relaxed algorithms for these operations. All algorithms are specified in great detail and we prove theoretical time and space complexity bounds. Most algorithms have been experimentally implemented in C++ and we provide benchmarks. We conclude by some suggestions for future developments and a discussion of the fitness of the lazy and relaxed approaches for specific applications. This paper is intended both for those who are interested in the most recent algorithms for the manipulation of formal power series and for those who want to actually implement a power series library into a computer algebra system.},
  date-added    = "2023-02-02 21:23:55 +0100",
  date-modified = "2023-02-02 21:23:55 +0100",
  DOI           = "https://doi.org/10.1006/jsco.2002.0562",
  ISSN          = "0747-7171",
  Journal       = "Journal of Symbolic Computation",
  Number        = "6",
  Pages         = "479-542",
  Title         = "Relax, but Don't be Too Lazy",
  URL           = "https://www.sciencedirect.com/science/article/pii/S0747717102905626",
  Volume        = "34",
  Year          = "2002",
  bdsk-url-1    = "https://www.sciencedirect.com/science/article/pii/S0747717102905626",
  bdsk-url-2    = "https://doi.org/10.1006/jsco.2002.0562",
  File          = "Relax, but Don’t be Too Lazy - 1-s2.0-S0747717102905626-main - a.pdf"
}
