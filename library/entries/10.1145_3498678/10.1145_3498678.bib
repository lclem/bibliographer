
@Article{         10.1145/3498678,
  Author        = "Baumann, Pascal and Majumdar, Rupak and Thinniyam, Ramanathan S. and Zetzsche, Georg",
  Abstract      = "Thread pooling is a common programming idiom in which a fixed set of worker threads are maintained to execute tasks concurrently. The workers repeatedly pick tasks and execute them to completion. Each task is sequential, with possibly recursive code, and tasks communicate over shared memory. Executing a task can lead to more new tasks being spawned. We consider the safety verification problem for thread-pooled programs. We parameterize the problem with two parameters: the size of the thread pool as well as the number of context switches for each task. The size of the thread pool determines the number of workers running concurrently. The number of context switches determines how many times a worker can be swapped out while executing a single task---like many verification problems for multithreaded recursive programs, the context bounding is important for decidability. We show that the safety verification problem for thread-pooled, context-bounded, Boolean programs is EXPSPACE-complete, even if the size of the thread pool and the context bound are given in binary. Our main result, the EXPSPACE upper bound, is derived using a sequence of new succinct encoding techniques of independent language-theoretic interest. In particular, we show a polynomial-time construction of downward closures of languages accepted by succinct pushdown automata as doubly succinct nondeterministic finite automata. While there are explicit doubly exponential lower bounds on the size of nondeterministic finite automata accepting the downward closure, our result shows these automata can be compressed. We show that thread pooling significantly reduces computational power: in contrast, if only the context bound is provided in binary, but there is no thread pooling, the safety verification problem becomes 3EXPSPACE-complete. Given the high complexity lower bounds of related problems involving binary parameters, the relatively low complexity of safety verification with thread-pooling comes as a surprise.",
  Address       = "New York, NY, USA",
  articleno     = "17",
  date-added    = "2022-01-17 07:58:00 +0100",
  date-modified = "2022-01-17 07:58:00 +0100",
  DOI           = "10.1145/3498678",
  issue_date    = "January 2022",
  Journal       = "Proc. ACM Program. Lang.",
  Keywords      = "verification, computational complexity, multithreaded programs, thread pool, context bounded, safety",
  Month         = "jan",
  Number        = "POPL",
  numpages      = "28",
  Publisher     = "Association for Computing Machinery",
  Title         = "Context-Bounded Verification of Thread Pools",
  URL           = "https://doi.org/10.1145/3498678",
  Volume        = "6",
  Year          = "2022",
  bdsk-url-1    = "https://doi.org/10.1145/3498678",
  File          = "Context-bounded verification of thread pools - 3498678 - m.pdf"
}
