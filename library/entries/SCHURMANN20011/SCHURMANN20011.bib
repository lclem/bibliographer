
@Article{         SCHURMANN20011,
  Author        = {Sch{\"u}rmann, Carsten and Despeyroux, Jo{\"e}lle and Pfenning, Frank},
  Abstract      = "Higher-order abstract syntax is a central representation technique in logical frameworks which maps variables of the object language into variables of the meta-language. It leads to concise encodings, but is incompatible with functions defined by primitive recursion or proofs by induction. In this paper we propose an extension of the simply typed lambda-calculus with iteration and case constructs which preserves the adequacy of higher-order abstract syntax encodings. The well-known paradoxes are avoided through the use of a modal operator which obeys the laws of S4. In the resulting calculus many functions over higher-order representations can be expressed elegantly. Our central technical result, namely that our calculus is conservative over the simply typed lambda-calculus, is proved by a rather complex argument using logical relations. We view our system as an important first step towards allowing the methodology of LF to be employed effectively in systems based on induction principles such as ALF, Coq, or NuPrl, leading to a synthesis of currently incompatible paradigms.",
  date-added    = "2019-04-03 19:12:42 +0200",
  date-modified = "2019-04-03 19:12:42 +0200",
  DOI           = "https://doi.org/10.1016/S0304-3975(00)00418-7",
  ISSN          = "0304-3975",
  Journal       = "Theoretical Computer Science",
  Keywords      = "Typed lambda calculus, Higher-order abstract syntax, Primitive recursion, Modal logic",
  Number        = "1",
  Pages         = "1 - 57",
  Title         = "Primitive recursion for higher-order abstract syntax",
  URL           = "http://www.sciencedirect.com/science/article/pii/S0304397500004187",
  Volume        = "266",
  Year          = "2001",
  bdsk-url-1    = "http://www.sciencedirect.com/science/article/pii/S0304397500004187",
  bdsk-url-2    = "https://doi.org/10.1016/S0304-3975(00)00418-7",
  File          = "1-s2.0-S0304397500004187-main (0) (0) - a - a - r.pdf",
  file-2        = "tlca97 (0) (0) - a - a - r.pdf"
}
