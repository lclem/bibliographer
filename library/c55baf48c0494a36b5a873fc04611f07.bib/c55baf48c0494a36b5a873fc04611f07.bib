
@Article{         c55baf48c0494a36b5a873fc04611f07,
  abstract      = {We describe a derivational approach to abstract interpretation that yields novel and transparently sound static analyses when applied to well-established abstract machines for higher-order and imperative programming languages. To demonstrate the technique and support our claim, we transform the CEK machine of Felleisen and Friedman (Proc. of the 14th ACM SIGACT-SIGPLAN Symp. Prin. Program. Langs, 1987, pp. 314-325), a lazy variant of Krivine's machine (Higher-Order Symb. Comput. Vol 20, 2007, pp. 199-207), and the stack-inspecting CM machine of Clements and Felleisen (ACM Trans. Program. Lang. Syst. Vol 26, 2004, pp. 1029-1052) into abstract interpretations of themselves. The resulting analyses bound temporal ordering of program events; predict return-flow and stack-inspection behavior; and approximate the flow and evaluation of by-need parameters. For all of these machines, we find that a series of well-known concrete machine refactorings, plus a technique of store-allocated continuations, leads to machines that abstract into static analyses simply by bounding their stores. These machines are parameterized by allocation functions that tune performance and precision and substantially expand the space of analyses that this framework can represent. We demonstrate that the technique scales up uniformly to allow static analysis of realistic language features, including tail calls, conditionals, mutation, exceptions, first-class continuations, and even garbage collection. In order to close the gap between formalism and implementation, we provide translations of the mathematics as running Haskell code for the initial development of our method. {\copyright} Copyright Cambridge University Press 2012.},
  author        = {{Van Horn}, David and Matthew Might},
  date-added    = {2017-04-24 08:57:25 +0000},
  date-modified = {2017-04-24 08:58:04 +0000},
  doi           = {10.1017/S0956796812000238},
  issn          = {0956-7968},
  journal       = {Journal of Functional Programming},
  keywords      = {Krivine machine, eager evaluation, control-flow analysis, reading},
  month         = {7},
  number        = {4-5},
  pages         = {705--746},
  publisher     = {Cambridge University Press},
  title         = {Systematic abstraction of abstract machines},
  volume        = {22},
  year          = {2012},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAndmFuaG9ybjIwMTJhYnN0cmFjdCAoMCkgLSBhIC0gYSAtIG4ucGRmTxEBjgAAAAABjgACAAADRVhUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////H3Zhbmhvcm4yMDEyYWJzdHJhYyNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQACAAAKAHhGAAAAAAAAAAAAAAAAAAhBcnRpY2xlcwACAD4vOlZvbHVtZXM6RVhUOkFydGljbGVzOnZhbmhvcm4yMDEyYWJzdHJhY3QgKDApIC0gYSAtIGEgLSBuLnBkZgAOAFAAJwB2AGEAbgBoAG8AcgBuADIAMAAxADIAYQBiAHMAdAByAGEAYwB0ACAAKAAwACkAIAAtACAAYQAgAC0AIABhACAALQAgAG4ALgBwAGQAZgAPAAgAAwBFAFgAVAASADEvQXJ0aWNsZXMvdmFuaG9ybjIwMTJhYnN0cmFjdCAoMCkgLSBhIC0gYSAtIG4ucGRmAAATAAwvVm9sdW1lcy9FWFT//wAAAAgADQAaACQATgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAHg},
  bdsk-file-2   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAodmFuaG9ybi1taWdodC1jYWNtMTEgKDApIC0gYSAtIGEgLSBuLnBkZk8RAZIAAAAAAZIAAgAAA0VYVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////x92YW5ob3JuLW1pZ2h0LWNhY20jRkZGRkZGRkYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAgAACgB4RgAAAAAAAAAAAAAAAAAIQXJ0aWNsZXMAAgA/LzpWb2x1bWVzOkVYVDpBcnRpY2xlczp2YW5ob3JuLW1pZ2h0LWNhY20xMSAoMCkgLSBhIC0gYSAtIG4ucGRmAAAOAFIAKAB2AGEAbgBoAG8AcgBuAC0AbQBpAGcAaAB0AC0AYwBhAGMAbQAxADEAIAAoADAAKQAgAC0AIABhACAALQAgAGEAIAAtACAAbgAuAHAAZABmAA8ACAADAEUAWABUABIAMi9BcnRpY2xlcy92YW5ob3JuLW1pZ2h0LWNhY20xMSAoMCkgLSBhIC0gYSAtIG4ucGRmABMADC9Wb2x1bWVzL0VYVP//AAAACAANABoAJABPAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAeU=},
  bdsk-url-1    = {http://dx.doi.org/10.1017/S0956796812000238}
}
